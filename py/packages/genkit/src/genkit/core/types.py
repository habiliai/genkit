# Copyright 2025 Google LLC
# SPDX-License-Identifier: Apache-2.0


# generated by datamodel-codegen:
#   filename:  genkit-schema.json
#   timestamp: 2025-01-17T17:30:26+00:00

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel, ConfigDict, Field


class InstrumentationLibrary(BaseModel):
    model_config = ConfigDict(extra='forbid')

    name: str
    version: str | None = None
    schemaUrl: str | None = None


class SpanContext(BaseModel):
    model_config = ConfigDict(extra='forbid')

    traceId: str
    spanId: str
    isRemote: bool | None = None
    traceFlags: float


class SameProcessAsParentSpan(BaseModel):
    model_config = ConfigDict(extra='forbid')

    value: bool


class State(Enum):
    success = 'success'
    error = 'error'


class SpanMetadata(BaseModel):
    model_config = ConfigDict(extra='forbid')

    name: str
    state: State | None = None
    input: Any | None = None
    output: Any | None = None
    isRoot: bool | None = None
    metadata: dict[str, str] | None = None


class SpanStatus(BaseModel):
    model_config = ConfigDict(extra='forbid')

    code: float
    message: str | None = None


class Annotation(BaseModel):
    model_config = ConfigDict(extra='forbid')

    attributes: dict[str, Any]
    description: str


class TimeEvent(BaseModel):
    model_config = ConfigDict(extra='forbid')

    time: float
    annotation: Annotation


class Code(Enum):
    blocked = 'blocked'
    other = 'other'
    unknown = 'unknown'


class CandidateError(BaseModel):
    model_config = ConfigDict(extra='forbid')

    index: float
    code: Code
    message: str | None = None


class FinishReason(Enum):
    stop = 'stop'
    length = 'length'
    blocked = 'blocked'
    other = 'other'
    unknown = 'unknown'


class DataPart(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Any | None = None
    media: Any | None = None
    toolRequest: Any | None = None
    toolResponse: Any | None = None
    data: Any | None = None
    metadata: dict[str, Any] | None = None


class Format(Enum):
    json = 'json'
    text = 'text'
    media = 'media'


class Output(BaseModel):
    model_config = ConfigDict(extra='forbid')

    format: Format | None = None
    schema_: dict[str, Any] | None = Field(None, alias='schema')


class Content(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: str
    media: Any | None = None


class Media(BaseModel):
    model_config = ConfigDict(extra='forbid')

    contentType: str | None = None
    url: str


class Content1(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Any | None = None
    media: Media


class ContextItem(BaseModel):
    model_config = ConfigDict(extra='forbid')

    content: list[Content | Content1]
    metadata: dict[str, Any] | None = None


class GenerationCommonConfig(BaseModel):
    model_config = ConfigDict(extra='forbid')

    version: str | None = None
    temperature: float | None = None
    maxOutputTokens: float | None = None
    topK: float | None = None
    topP: float | None = None
    stopSequences: list[str] | None = None


class GenerationUsage(BaseModel):
    model_config = ConfigDict(extra='forbid')

    inputTokens: float | None = None
    outputTokens: float | None = None
    totalTokens: float | None = None
    inputCharacters: float | None = None
    outputCharacters: float | None = None
    inputImages: float | None = None
    outputImages: float | None = None
    inputVideos: float | None = None
    outputVideos: float | None = None
    inputAudioFiles: float | None = None
    outputAudioFiles: float | None = None
    custom: dict[str, float] | None = None


class Role(Enum):
    system = 'system'
    user = 'user'
    model = 'model'
    tool = 'tool'


class ToolDefinition(BaseModel):
    model_config = ConfigDict(extra='forbid')

    name: str
    description: str
    inputSchema: dict[str, Any] = Field(
        ..., description='Valid JSON Schema representing the input of the tool.'
    )
    outputSchema: dict[str, Any] | None = Field(
        None, description='Valid JSON Schema describing the output of the tool.'
    )
    metadata: dict[str, Any] | None = Field(
        None, description='additional metadata for this tool definition'
    )


class ToolRequest1(BaseModel):
    model_config = ConfigDict(extra='forbid')

    ref: str | None = None
    name: str
    input: Any | None = None


class ToolResponse1(BaseModel):
    model_config = ConfigDict(extra='forbid')

    ref: str | None = None
    name: str
    output: Any | None = None


class Content2(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: str
    media: Any | None = None


class Media2(BaseModel):
    model_config = ConfigDict(extra='forbid')

    contentType: str | None = None
    url: str


class Content3(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Any | None = None
    media: Media2


class Items(BaseModel):
    model_config = ConfigDict(extra='forbid')

    content: list[Content2 | Content3]
    metadata: dict[str, Any] | None = None


class OutputModel(BaseModel):
    model_config = ConfigDict(extra='forbid')

    format: Format | None = None
    schema_: dict[str, Any] | None = Field(None, alias='schema')


class Link(BaseModel):
    model_config = ConfigDict(extra='forbid')

    context: SpanContext | None = None
    attributes: dict[str, Any] | None = None
    droppedAttributesCount: float | None = None


class TimeEvents(BaseModel):
    model_config = ConfigDict(extra='forbid')

    timeEvent: list[TimeEvent] | None = None


class SpanData(BaseModel):
    model_config = ConfigDict(extra='forbid')

    spanId: str
    traceId: str
    parentSpanId: str | None = None
    startTime: float
    endTime: float
    attributes: dict[str, Any]
    displayName: str
    links: list[Link] | None = None
    instrumentationLibrary: InstrumentationLibrary
    spanKind: str
    sameProcessAsParentSpan: SameProcessAsParentSpan | None = None
    status: SpanStatus | None = None
    timeEvents: TimeEvents | None = None
    truncated: bool | None = None


class TraceData(BaseModel):
    model_config = ConfigDict(extra='forbid')

    traceId: str
    displayName: str | None = None
    startTime: float | None = None
    endTime: float | None = None
    spans: dict[str, SpanData]


class MediaPart(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Any | None = None
    media: Media
    toolRequest: Any | None = None
    toolResponse: Any | None = None
    data: Any | None = None
    metadata: dict[str, Any] | None = None


class Supports(BaseModel):
    model_config = ConfigDict(extra='forbid')

    multiturn: bool | None = None
    media: bool | None = None
    tools: bool | None = None
    systemRole: bool | None = None
    output: list[Format] | None = None
    context: bool | None = None


class ModelInfo(BaseModel):
    model_config = ConfigDict(extra='forbid')

    versions: list[str] | None = None
    label: str | None = None
    supports: Supports | None = None


class TextPart(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: str
    media: Any | None = None
    toolRequest: Any | None = None
    toolResponse: Any | None = None
    data: Any | None = None
    metadata: dict[str, Any] | None = None


class ToolRequestPart(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Any | None = None
    media: Any | None = None
    toolRequest: ToolRequest1
    toolResponse: Any | None = None
    data: Any | None = None
    metadata: dict[str, Any] | None = None


class ToolResponsePart(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Any | None = None
    media: Any | None = None
    toolRequest: Any | None = None
    toolResponse: ToolResponse1
    data: Any | None = None
    metadata: dict[str, Any] | None = None


class DocumentData(BaseModel):
    model_config = ConfigDict(extra='forbid')

    content: list[
        TextPart | MediaPart | ToolRequestPart | ToolResponsePart | DataPart
    ]
    metadata: dict[str, Any] | None = None


class GenerateResponseChunk(BaseModel):
    model_config = ConfigDict(extra='forbid')

    content: list[
        TextPart | MediaPart | ToolRequestPart | ToolResponsePart | DataPart
    ]
    custom: Any | None = None
    aggregated: bool | None = None
    index: float


class Message(BaseModel):
    model_config = ConfigDict(extra='forbid')

    role: Role
    content: list[
        TextPart | MediaPart | ToolRequestPart | ToolResponsePart | DataPart
    ]
    metadata: dict[str, Any] | None = None


class ModelResponseChunk(BaseModel):
    model_config = ConfigDict(extra='forbid')

    content: list[
        TextPart | MediaPart | ToolRequestPart | ToolResponsePart | DataPart
    ]
    custom: Any | None = None
    aggregated: bool | None = None


class Candidate(BaseModel):
    model_config = ConfigDict(extra='forbid')

    index: float
    message: Message
    usage: GenerationUsage | None = None
    finishReason: FinishReason
    finishMessage: str | None = None
    custom: Any | None = None


class GenerateRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')

    messages: list[Message]
    config: Any | None = None
    tools: list[ToolDefinition] | None = None
    output: Output | None = None
    context: list[ContextItem] | None = None
    candidates: float | None = None


class GenerateResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    message: Message | None = None
    finishReason: FinishReason | None = None
    finishMessage: str | None = None
    latencyMs: float | None = None
    usage: GenerationUsage | None = None
    custom: Any | None = None
    request: GenerateRequest | None = None
    candidates: list[Candidate] | None = None


class ModelRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')

    messages: list[Message]
    config: Any | None = None
    tools: list[ToolDefinition] | None = None
    output: OutputModel | None = None
    context: list[Items] | None = None


class ModelResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    message: Message | None = None
    finishReason: FinishReason
    finishMessage: str | None = None
    latencyMs: float | None = None
    usage: GenerationUsage | None = None
    custom: Any | None = None
    request: GenerateRequest | None = None
