# Copyright 2025 Google LLC
# SPDX-License-Identifier: Apache-2.0

# DO NOT EDIT: Generated by `generate_schema_types` from `genkit-schemas.json`.
from __future__ import annotations
from enum import Enum
from typing import Any
from pydantic import BaseModel, ConfigDict, Field, RootModel


class Model(RootModel[Any]):
    root: Any


class InstrumentationLibrary(BaseModel):
    model_config = ConfigDict(extra='forbid')
    name: str
    version: str | None = None
    schemaUrl: str | None = None


class SpanContext(BaseModel):
    model_config = ConfigDict(extra='forbid')
    traceId: str
    spanId: str
    isRemote: bool | None = None
    traceFlags: float


class SameProcessAsParentSpan(BaseModel):
    model_config = ConfigDict(extra='forbid')
    value: bool


class State(Enum):
    success = 'success'
    error = 'error'


class SpanMetadata(BaseModel):
    model_config = ConfigDict(extra='forbid')
    name: str
    state: State | None = None
    input: Any | None = None
    output: Any | None = None
    isRoot: bool | None = None
    metadata: dict[str, str] | None = None


class SpanStatus(BaseModel):
    model_config = ConfigDict(extra='forbid')
    code: float
    message: str | None = None


class Annotation(BaseModel):
    model_config = ConfigDict(extra='forbid')
    attributes: dict[str, Any]
    description: str


class TimeEvent(BaseModel):
    model_config = ConfigDict(extra='forbid')
    time: float
    annotation: Annotation


class Code(Enum):
    blocked = 'blocked'
    other = 'other'
    unknown = 'unknown'


class CandidateError(BaseModel):
    model_config = ConfigDict(extra='forbid')
    index: float
    code: Code
    message: str | None = None


class DataPart(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Any | None = None
    media: Any | None = None
    toolRequest: Any | None = None
    toolResponse: Any | None = None
    data: Any | None = None
    metadata: dict[str, Any] | None = None


class FinishReason(Enum):
    stop = 'stop'
    length = 'length'
    blocked = 'blocked'
    interrupted = 'interrupted'
    other = 'other'
    unknown = 'unknown'


class Content(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: str
    media: Any | None = None


class Media(BaseModel):
    model_config = ConfigDict(extra='forbid')
    contentType: str | None = None
    url: str


class Content1(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Any | None = None
    media: Media


class Doc(BaseModel):
    model_config = ConfigDict(extra='forbid')
    content: list[Content | Content1]
    metadata: dict[str, Any] | None = None


class ToolChoice(Enum):
    auto = 'auto'
    required = 'required'
    none = 'none'


class Output(BaseModel):
    model_config = ConfigDict(extra='forbid')
    format: str | None = None
    contentType: str | None = None
    instructions: bool | str | None = None
    jsonSchema: Any | None = None
    constrained: bool | None = None


class Format(Enum):
    json = 'json'
    text = 'text'
    media = 'media'


class Output1(BaseModel):
    model_config = ConfigDict(extra='forbid')
    format: Format | None = None
    schema_: dict[str, Any] | None = Field(None, alias='schema')


class GenerationCommonConfig(BaseModel):
    model_config = ConfigDict(extra='forbid')
    version: str | None = None
    temperature: float | None = None
    maxOutputTokens: float | None = None
    topK: float | None = None
    topP: float | None = None
    stopSequences: list[str] | None = None


class GenerationUsage(BaseModel):
    model_config = ConfigDict(extra='forbid')
    inputTokens: float | None = None
    outputTokens: float | None = None
    totalTokens: float | None = None
    inputCharacters: float | None = None
    outputCharacters: float | None = None
    inputImages: float | None = None
    outputImages: float | None = None
    inputVideos: float | None = None
    outputVideos: float | None = None
    inputAudioFiles: float | None = None
    outputAudioFiles: float | None = None
    custom: dict[str, float] | None = None


class Constrained(Enum):
    none = 'none'
    all = 'all'
    no_tools = 'no-tools'


class Supports(BaseModel):
    model_config = ConfigDict(extra='forbid')
    multiturn: bool | None = None
    media: bool | None = None
    tools: bool | None = None
    systemRole: bool | None = None
    output: list[str] | None = None
    contentType: list[str] | None = None
    context: bool | None = None
    constrained: Constrained | None = None
    toolChoice: bool | None = None


class ModelInfo(BaseModel):
    model_config = ConfigDict(extra='forbid')
    versions: list[str] | None = None
    label: str | None = None
    supports: Supports | None = None


class Role(Enum):
    system = 'system'
    user = 'user'
    model = 'model'
    tool = 'tool'


class ToolDefinition(BaseModel):
    model_config = ConfigDict(extra='forbid')
    name: str
    description: str
    inputSchema: dict[str, Any] = Field(
        ..., description='Valid JSON Schema representing the input of the tool.'
    )
    outputSchema: dict[str, Any] | None = Field(
        None, description='Valid JSON Schema describing the output of the tool.'
    )
    metadata: dict[str, Any] | None = Field(
        None, description='additional metadata for this tool definition'
    )


class ToolRequest1(BaseModel):
    model_config = ConfigDict(extra='forbid')
    ref: str | None = None
    name: str
    input: Any | None = None


class ToolResponse1(BaseModel):
    model_config = ConfigDict(extra='forbid')
    ref: str | None = None
    name: str
    output: Any | None = None


class MediaModel(RootModel[Any]):
    root: Any


class Metadata(RootModel[dict[str, Any] | None]):
    root: dict[str, Any] | None = None


class Text(RootModel[Any]):
    root: Any


class ToolRequest(RootModel[Any]):
    root: Any


class ToolResponse(RootModel[Any]):
    root: Any


class Content2(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: str
    media: Any | None = None


class Media2(BaseModel):
    model_config = ConfigDict(extra='forbid')
    contentType: str | None = None
    url: str


class Content3(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Any | None = None
    media: Media2


class Items(BaseModel):
    model_config = ConfigDict(extra='forbid')
    content: list[Content2 | Content3]
    metadata: dict[str, Any] | None = None


class Config(RootModel[Any]):
    root: Any


class OutputModel(BaseModel):
    model_config = ConfigDict(extra='forbid')
    format: Format | None = None
    schema_: dict[str, Any] | None = Field(None, alias='schema')


class Tools(RootModel[list[ToolDefinition]]):
    root: list[ToolDefinition]


class Custom(RootModel[Any]):
    root: Any


class FinishMessage(RootModel[str]):
    root: str


class LatencyMs(RootModel[float]):
    root: float


class Usage(RootModel[GenerationUsage]):
    root: GenerationUsage


class Aggregated(RootModel[bool]):
    root: bool


class Index(RootModel[float]):
    root: float


class Data(RootModel[Any]):
    root: Any


class Link(BaseModel):
    model_config = ConfigDict(extra='forbid')
    context: SpanContext | None = None
    attributes: dict[str, Any] | None = None
    droppedAttributesCount: float | None = None


class TimeEvents(BaseModel):
    model_config = ConfigDict(extra='forbid')
    timeEvent: list[TimeEvent] | None = None


class SpanData(BaseModel):
    model_config = ConfigDict(extra='forbid')
    spanId: str
    traceId: str
    parentSpanId: str | None = None
    startTime: float
    endTime: float
    attributes: dict[str, Any]
    displayName: str
    links: list[Link] | None = None
    instrumentationLibrary: InstrumentationLibrary
    spanKind: str
    sameProcessAsParentSpan: SameProcessAsParentSpan | None = None
    status: SpanStatus | None = None
    timeEvents: TimeEvents | None = None
    truncated: bool | None = None


class TraceData(BaseModel):
    model_config = ConfigDict(extra='forbid')
    traceId: str
    displayName: str | None = None
    startTime: float | None = None
    endTime: float | None = None
    spans: dict[str, SpanData]


class MediaPart(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Text | None = None
    media: Media
    toolRequest: ToolRequest | None = None
    toolResponse: ToolResponse | None = None
    data: Any | None = None
    metadata: Metadata | None = None


class TextPart(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: str
    media: MediaModel | None = None
    toolRequest: ToolRequest | None = None
    toolResponse: ToolResponse | None = None
    data: Data | None = None
    metadata: Metadata | None = None


class ToolRequestPart(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Text | None = None
    media: MediaModel | None = None
    toolRequest: ToolRequest1
    toolResponse: ToolResponse | None = None
    data: Data | None = None
    metadata: Metadata | None = None


class ToolResponsePart(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Text | None = None
    media: MediaModel | None = None
    toolRequest: ToolRequest | None = None
    toolResponse: ToolResponse1
    data: Data | None = None
    metadata: Metadata | None = None


class Part(
    RootModel[
        TextPart | MediaPart | ToolRequestPart | ToolResponsePart | DataPart
    ]
):
    root: TextPart | MediaPart | ToolRequestPart | ToolResponsePart | DataPart


class ContentModel(RootModel[list[Part]]):
    root: list[Part]


class DocumentData(BaseModel):
    model_config = ConfigDict(extra='forbid')
    content: list[Part]
    metadata: dict[str, Any] | None = None


class GenerateResponseChunk(BaseModel):
    model_config = ConfigDict(extra='forbid')
    role: Role | None = None
    index: float | None = None
    content: list[Part]
    custom: Any | None = None
    aggregated: bool | None = None


class Message(BaseModel):
    model_config = ConfigDict(extra='forbid')
    role: Role
    content: list[Part]
    metadata: dict[str, Any] | None = None


class ModelResponseChunk(BaseModel):
    model_config = ConfigDict(extra='forbid')
    role: Role | None = None
    index: Index | None = None
    content: ContentModel
    custom: Custom | None = None
    aggregated: Aggregated | None = None


class Messages(RootModel[list[Message]]):
    root: list[Message]


class Candidate(BaseModel):
    model_config = ConfigDict(extra='forbid')
    index: float
    message: Message
    usage: GenerationUsage | None = None
    finishReason: FinishReason
    finishMessage: str | None = None
    custom: Any | None = None


class GenerateActionOptions(BaseModel):
    model_config = ConfigDict(extra='forbid')
    model: str
    docs: list[Doc] | None = None
    messages: list[Message]
    tools: list[str] | None = None
    toolChoice: ToolChoice | None = None
    config: Any | None = None
    output: Output | None = None
    returnToolRequests: bool | None = None
    maxTurns: float | None = None


class GenerateRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')
    messages: list[Message]
    config: Any | None = None
    tools: list[ToolDefinition] | None = None
    toolChoice: ToolChoice | None = None
    output: Output1 | None = None
    context: list[Items] | None = None
    candidates: float | None = None


class GenerateResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')
    message: Message | None = None
    finishReason: FinishReason | None = None
    finishMessage: str | None = None
    latencyMs: float | None = None
    usage: GenerationUsage | None = None
    custom: Any | None = None
    request: GenerateRequest | None = None
    candidates: list[Candidate] | None = None


class ModelRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')
    messages: Messages
    config: Config | None = None
    tools: Tools | None = None
    toolChoice: ToolChoice | None = None
    output: OutputModel | None = None
    context: list[Items] | None = None


class Request(RootModel[GenerateRequest]):
    root: GenerateRequest


class ModelResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')
    message: Message | None = None
    finishReason: FinishReason
    finishMessage: FinishMessage | None = None
    latencyMs: LatencyMs | None = None
    usage: Usage | None = None
    custom: Custom | None = None
    request: Request | None = None
