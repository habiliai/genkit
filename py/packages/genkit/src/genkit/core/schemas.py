# Copyright 2025 Google LLC
# SPDX-License-Identifier: Apache-2.0

# DO NOT EDIT: Generated by `generate_schema_types` from `genkit-schemas.json`.
from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Model(RootModel[Any]):
    root: Any


class InstrumentationLibrary(BaseModel):
    model_config = ConfigDict(extra='forbid')
    name: str
    version: str | None = None
    schema_url: str | None = Field(None, alias='schemaUrl')


class SpanContext(BaseModel):
    model_config = ConfigDict(extra='forbid')
    trace_id: str = Field(..., alias='traceId')
    span_id: str = Field(..., alias='spanId')
    is_remote: bool | None = Field(None, alias='isRemote')
    trace_flags: float = Field(..., alias='traceFlags')


class SameProcessAsParentSpan(BaseModel):
    model_config = ConfigDict(extra='forbid')
    value: bool


class State(Enum):
    success = 'success'
    error = 'error'


class SpanMetadata(BaseModel):
    model_config = ConfigDict(extra='forbid')
    name: str
    state: State | None = None
    input: Any | None = None
    output: Any | None = None
    is_root: bool | None = Field(None, alias='isRoot')
    metadata: dict[str, str] | None = None


class SpanStatus(BaseModel):
    model_config = ConfigDict(extra='forbid')
    code: float
    message: str | None = None


class Annotation(BaseModel):
    model_config = ConfigDict(extra='forbid')
    attributes: dict[str, Any]
    description: str


class TimeEvent(BaseModel):
    model_config = ConfigDict(extra='forbid')
    time: float
    annotation: Annotation


class Code(Enum):
    blocked = 'blocked'
    other = 'other'
    unknown = 'unknown'


class CandidateError(BaseModel):
    model_config = ConfigDict(extra='forbid')
    index: float
    code: Code
    message: str | None = None


class DataPart(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Any | None = None
    media: Any | None = None
    tool_request: Any | None = Field(None, alias='toolRequest')
    tool_response: Any | None = Field(None, alias='toolResponse')
    data: Any | None = None
    metadata: dict[str, Any] | None = None


class FinishReason(Enum):
    stop = 'stop'
    length = 'length'
    blocked = 'blocked'
    interrupted = 'interrupted'
    other = 'other'
    unknown = 'unknown'


class Content(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: str
    media: Any | None = None


class Media(BaseModel):
    model_config = ConfigDict(extra='forbid')
    content_type: str | None = Field(None, alias='contentType')
    url: str


class Content1(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Any | None = None
    media: Media


class Doc(BaseModel):
    model_config = ConfigDict(extra='forbid')
    content: list[Content | Content1]
    metadata: dict[str, Any] | None = None


class ToolChoice(Enum):
    auto = 'auto'
    required = 'required'
    none = 'none'


class Output(BaseModel):
    model_config = ConfigDict(extra='forbid')
    format: str | None = None
    content_type: str | None = Field(None, alias='contentType')
    instructions: bool | str | None = None
    json_schema: Any | None = Field(None, alias='jsonSchema')
    constrained: bool | None = None


class Format(Enum):
    json = 'json'
    text = 'text'
    media = 'media'


class Output1(BaseModel):
    model_config = ConfigDict(extra='forbid')
    format: Format | None = None
    schema_: dict[str, Any] | None = Field(None, alias='schema')


class GenerationCommonConfig(BaseModel):
    model_config = ConfigDict(extra='forbid')
    version: str | None = None
    temperature: float | None = None
    max_output_tokens: float | None = Field(None, alias='maxOutputTokens')
    top_k: float | None = Field(None, alias='topK')
    top_p: float | None = Field(None, alias='topP')
    stop_sequences: list[str] | None = Field(None, alias='stopSequences')


class GenerationUsage(BaseModel):
    model_config = ConfigDict(extra='forbid')
    input_tokens: float | None = Field(None, alias='inputTokens')
    output_tokens: float | None = Field(None, alias='outputTokens')
    total_tokens: float | None = Field(None, alias='totalTokens')
    input_characters: float | None = Field(None, alias='inputCharacters')
    output_characters: float | None = Field(None, alias='outputCharacters')
    input_images: float | None = Field(None, alias='inputImages')
    output_images: float | None = Field(None, alias='outputImages')
    input_videos: float | None = Field(None, alias='inputVideos')
    output_videos: float | None = Field(None, alias='outputVideos')
    input_audio_files: float | None = Field(None, alias='inputAudioFiles')
    output_audio_files: float | None = Field(None, alias='outputAudioFiles')
    custom: dict[str, float] | None = None


class Constrained(Enum):
    none = 'none'
    all = 'all'
    no_tools = 'no-tools'


class Supports(BaseModel):
    model_config = ConfigDict(extra='forbid')
    multiturn: bool | None = None
    media: bool | None = None
    tools: bool | None = None
    system_role: bool | None = Field(None, alias='systemRole')
    output: list[str] | None = None
    content_type: list[str] | None = Field(None, alias='contentType')
    context: bool | None = None
    constrained: Constrained | None = None
    tool_choice: bool | None = Field(None, alias='toolChoice')


class ModelInfo(BaseModel):
    model_config = ConfigDict(extra='forbid')
    versions: list[str] | None = None
    label: str | None = None
    supports: Supports | None = None


class Role(Enum):
    system = 'system'
    user = 'user'
    model = 'model'
    tool = 'tool'


class ToolDefinition(BaseModel):
    model_config = ConfigDict(extra='forbid')
    name: str
    description: str
    input_schema: dict[str, Any] = Field(
        ...,
        alias='inputSchema',
        description='Valid JSON Schema representing the input of the tool.',
    )
    output_schema: dict[str, Any] | None = Field(
        None,
        alias='outputSchema',
        description='Valid JSON Schema describing the output of the tool.',
    )
    metadata: dict[str, Any] | None = Field(
        None, description='additional metadata for this tool definition'
    )


class ToolRequest1(BaseModel):
    model_config = ConfigDict(extra='forbid')
    ref: str | None = None
    name: str
    input: Any | None = None


class ToolResponse1(BaseModel):
    model_config = ConfigDict(extra='forbid')
    ref: str | None = None
    name: str
    output: Any | None = None


class MediaModel(RootModel[Any]):
    root: Any


class Metadata(RootModel[dict[str, Any] | None]):
    root: dict[str, Any] | None = None


class Text(RootModel[Any]):
    root: Any


class ToolRequest(RootModel[Any]):
    root: Any


class ToolResponse(RootModel[Any]):
    root: Any


class Content2(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: str
    media: Any | None = None


class Media2(BaseModel):
    model_config = ConfigDict(extra='forbid')
    content_type: str | None = Field(None, alias='contentType')
    url: str


class Content3(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Any | None = None
    media: Media2


class Items(BaseModel):
    model_config = ConfigDict(extra='forbid')
    content: list[Content2 | Content3]
    metadata: dict[str, Any] | None = None


class Config(RootModel[Any]):
    root: Any


class OutputModel(BaseModel):
    model_config = ConfigDict(extra='forbid')
    format: Format | None = None
    schema_: dict[str, Any] | None = Field(None, alias='schema')


class Tools(RootModel[list[ToolDefinition]]):
    root: list[ToolDefinition]


class Custom(RootModel[Any]):
    root: Any


class FinishMessage(RootModel[str]):
    root: str


class LatencyMs(RootModel[float]):
    root: float


class Usage(RootModel[GenerationUsage]):
    root: GenerationUsage


class Aggregated(RootModel[bool]):
    root: bool


class Index(RootModel[float]):
    root: float


class Data(RootModel[Any]):
    root: Any


class Link(BaseModel):
    model_config = ConfigDict(extra='forbid')
    context: SpanContext | None = None
    attributes: dict[str, Any] | None = None
    dropped_attributes_count: float | None = Field(
        None, alias='droppedAttributesCount'
    )


class TimeEvents(BaseModel):
    model_config = ConfigDict(extra='forbid')
    time_event: list[TimeEvent] | None = Field(None, alias='timeEvent')


class SpanData(BaseModel):
    model_config = ConfigDict(extra='forbid')
    span_id: str = Field(..., alias='spanId')
    trace_id: str = Field(..., alias='traceId')
    parent_span_id: str | None = Field(None, alias='parentSpanId')
    start_time: float = Field(..., alias='startTime')
    end_time: float = Field(..., alias='endTime')
    attributes: dict[str, Any]
    display_name: str = Field(..., alias='displayName')
    links: list[Link] | None = None
    instrumentation_library: InstrumentationLibrary = Field(
        ..., alias='instrumentationLibrary'
    )
    span_kind: str = Field(..., alias='spanKind')
    same_process_as_parent_span: SameProcessAsParentSpan | None = Field(
        None, alias='sameProcessAsParentSpan'
    )
    status: SpanStatus | None = None
    time_events: TimeEvents | None = Field(None, alias='timeEvents')
    truncated: bool | None = None


class TraceData(BaseModel):
    model_config = ConfigDict(extra='forbid')
    trace_id: str = Field(..., alias='traceId')
    display_name: str | None = Field(None, alias='displayName')
    start_time: float | None = Field(None, alias='startTime')
    end_time: float | None = Field(None, alias='endTime')
    spans: dict[str, SpanData]


class MediaPart(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Text | None = None
    media: Media
    tool_request: ToolRequest | None = Field(None, alias='toolRequest')
    tool_response: ToolResponse | None = Field(None, alias='toolResponse')
    data: Any | None = None
    metadata: Metadata | None = None


class TextPart(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: str
    media: MediaModel | None = None
    tool_request: ToolRequest | None = Field(None, alias='toolRequest')
    tool_response: ToolResponse | None = Field(None, alias='toolResponse')
    data: Data | None = None
    metadata: Metadata | None = None


class ToolRequestPart(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Text | None = None
    media: MediaModel | None = None
    tool_request: ToolRequest1 = Field(..., alias='toolRequest')
    tool_response: ToolResponse | None = Field(None, alias='toolResponse')
    data: Data | None = None
    metadata: Metadata | None = None


class ToolResponsePart(BaseModel):
    model_config = ConfigDict(extra='forbid')
    text: Text | None = None
    media: MediaModel | None = None
    tool_request: ToolRequest | None = Field(None, alias='toolRequest')
    tool_response: ToolResponse1 = Field(..., alias='toolResponse')
    data: Data | None = None
    metadata: Metadata | None = None


class Part(
    RootModel[
        TextPart | MediaPart | ToolRequestPart | ToolResponsePart | DataPart
    ]
):
    root: TextPart | MediaPart | ToolRequestPart | ToolResponsePart | DataPart


class ContentModel(RootModel[list[Part]]):
    root: list[Part]


class DocumentData(BaseModel):
    model_config = ConfigDict(extra='forbid')
    content: list[Part]
    metadata: dict[str, Any] | None = None


class GenerateResponseChunk(BaseModel):
    model_config = ConfigDict(extra='forbid')
    role: Role | None = None
    index: float | None = None
    content: list[Part]
    custom: Any | None = None
    aggregated: bool | None = None


class Message(BaseModel):
    model_config = ConfigDict(extra='forbid')
    role: Role
    content: list[Part]
    metadata: dict[str, Any] | None = None


class ModelResponseChunk(BaseModel):
    model_config = ConfigDict(extra='forbid')
    role: Role | None = None
    index: Index | None = None
    content: ContentModel
    custom: Custom | None = None
    aggregated: Aggregated | None = None


class Messages(RootModel[list[Message]]):
    root: list[Message]


class Candidate(BaseModel):
    model_config = ConfigDict(extra='forbid')
    index: float
    message: Message
    usage: GenerationUsage | None = None
    finish_reason: FinishReason = Field(..., alias='finishReason')
    finish_message: str | None = Field(None, alias='finishMessage')
    custom: Any | None = None


class GenerateActionOptions(BaseModel):
    model_config = ConfigDict(extra='forbid')
    model: str
    docs: list[Doc] | None = None
    messages: list[Message]
    tools: list[str] | None = None
    tool_choice: ToolChoice | None = Field(None, alias='toolChoice')
    config: Any | None = None
    output: Output | None = None
    return_tool_requests: bool | None = Field(None, alias='returnToolRequests')
    max_turns: float | None = Field(None, alias='maxTurns')


class GenerateRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')
    messages: list[Message]
    config: Any | None = None
    tools: list[ToolDefinition] | None = None
    tool_choice: ToolChoice | None = Field(None, alias='toolChoice')
    output: Output1 | None = None
    context: list[Items] | None = None
    candidates: float | None = None


class GenerateResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')
    message: Message | None = None
    finish_reason: FinishReason | None = Field(None, alias='finishReason')
    finish_message: str | None = Field(None, alias='finishMessage')
    latency_ms: float | None = Field(None, alias='latencyMs')
    usage: GenerationUsage | None = None
    custom: Any | None = None
    request: GenerateRequest | None = None
    candidates: list[Candidate] | None = None


class ModelRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')
    messages: Messages
    config: Config | None = None
    tools: Tools | None = None
    tool_choice: ToolChoice | None = Field(None, alias='toolChoice')
    output: OutputModel | None = None
    context: list[Items] | None = None


class Request(RootModel[GenerateRequest]):
    root: GenerateRequest


class ModelResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')
    message: Message | None = None
    finish_reason: FinishReason = Field(..., alias='finishReason')
    finish_message: FinishMessage | None = Field(None, alias='finishMessage')
    latency_ms: LatencyMs | None = Field(None, alias='latencyMs')
    usage: Usage | None = None
    custom: Custom | None = None
    request: Request | None = None
